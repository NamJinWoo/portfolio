{"version":3,"sources":["portfolio/Title.js","portfolio/Career.js","portfolio/Introduction.js","portfolio/Experience.js","portfolio/Project.js","portfolio/Award.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Career","Introduction","Experience","Project","Award","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAWeA,MATf,WACI,OACI,6BAASC,UAAU,OACf,kDACA,oDCwBGC,MA5Bf,WACI,OACI,6BAASD,UAAU,aACf,wBAAIA,UAAY,SAAhB,UACA,6BACA,6BACI,+DACA,+EACA,+DACA,wiECCDE,MAVf,WACI,OACI,6BAASF,UAAU,aACf,wBAAIA,UAAY,SAAhB,gBACA,6BACA,yECWGG,MAhBf,WACI,OACI,6BAASH,UAAU,aACf,wBAAIA,UAAU,SAAd,cACA,6BACA,2EACA,+DACA,kFAEA,+DACA,6DACA,yFCQGI,MAnBf,WACI,OACI,6BAASJ,UAAU,aACf,wBAAIA,UAAU,SAAd,WACA,6BAEA,wHACA,+DACA,uHACA,4CAEA,gDACA,+DACA,+CACA,8CCOGK,MArBf,WACI,OACI,6BAASL,UAAU,aACf,wBAAIA,UAAU,SAAd,SACA,6BAEA,+CACA,qGACA,yDACA,4HACA,6CAEA,kJACA,2GACA,yDACA,yDACA,+CCQGM,MAjBf,WACE,OACE,6BACE,6BACE,kBAAC,EAAD,OAEF,yBAAKN,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39411bd6.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Title(){\n    return (\n        <section className=\"App\">\n            <h3>Software Developer</h3>\n            <h1>남진우</h1>\n        </section>\n    );\n}\n\nexport default Title;","import React from \"react\";\n\nfunction Career(){\n    return (\n        <section className='container'>\n            <h2 className = \"title\">Career</h2>\n            <hr/>\n            <div>\n                <h3>해외 인턴쉽</h3>\n                <p>회사명 : NanoCellect Biomedical Inc.</p>\n                <p>기간 : 2019.03 ~ 2019.09</p>\n                <p>\n                    저는 미국 샌디에고에 위치한 NanoCellect Biomedical Inc. 에서 \n                    소프트웨어 팀 인턴으로 생활하면서 다양한 경험과 실무능력을 쌓을 수 있었습니다. \n                    저는 Flask Framework를 사용한 Web Application을 관리하였습니다. \n                    세포 분류 실험이 진행되는 Machine에서 서버로 전달된 데이터를 가공해 여러 가지 \n                    그래프 및 Chart로 변환해 결괏값을 보여주는 직무를 진행하였습니다.  \n                    HTML, JS, CSS를 기반을 둔 프론트엔드와 Python-Flask를 기반으로 한 \n                    백엔드까지 한 번에 관리하면서 웹 개발에 대한 실무 능력을 키울 수 있었습니다. \n                    또한, 결괏값을 기반으로 고객 관리에 좋은 영향을 줄 수 있는 'Auto-Notification E-mail'이라는 \n                    새로운 아이디어를 제안했고, 회사 임원들 및 Customer 관리팀 모두 \n                    '앞서서 고객 관리에 힘을 줄 수 있는 좋은 아이디어다'라며 만족했습니다. \n                    이처럼 저는 해외 실무를 통해 웹 개발 능력과 팀원들과의 소통, 또한 더 나은 \n                    서비스를 위한 아이디어 제공을 하면서 성장할 수 있었습니다.\n                </p>\n            </div>\n        </section>\n    ); \n}\n\nexport default Career;","import React from \"react\";\n\nfunction Introduction(){\n    return (\n        <section className='container'>\n            <h2 className = \"title\">About Myself</h2>\n            <hr/>\n            <span>남진우입니다.</span>\n        </section>\n    );\n}\n\nexport default Introduction","import React from \"react\";\n\nfunction Experience(){\n    return (\n        <section className='container'>\n            <h2 className='title'>Experience</h2>\n            <hr/>\n            <h3>글로벌 인재트랙</h3>\n            <p>기간 : 2018.12 ~ 2019.02</p>\n            <p>퍼듀 대학교 갔다옴.</p>\n\n            <h3>학생회 활동</h3>\n            <p>기간 : 2018.03~2018.12</p>\n            <p>체육부장으로 활동함.</p>\n        </section>\n    );\n}\n\nexport default Experience;","import React from \"react\";\n\nfunction Project(){\n    return (\n        <section className='container'>\n            <h2 className='title'>Project</h2>\n            <hr/>\n            \n            <h3>도커를 활용한 논문 정리 웹사이트</h3>\n            <p>기간 : 2019.10 ~ 2020.05</p>\n            <p>도커를 활용한 논문 정리 웹사이트</p>\n            <p>Github URL : </p>\n\n            <h3>All-in-One Music</h3>\n            <p>기간 : 2018.05 ~ 2018.06</p>\n            <p>All-in-One Music</p>\n            <p>Github URL : </p>\n        </section>\n    );\n}\n\nexport default Project;","import React from 'react';\n\nfunction Award(){\n    return (\n        <section className='container'>\n            <h2 className='title'>Award</h2>\n            <hr/>\n\n            <h3>Webolution 2018</h3>\n            <h4>수상명: 개발부문 최우수상</h4>\n            <p>수상일자: </p>\n            <p>수상기관: 충남대학교 컴퓨터공학과</p>\n            <p>내용: </p>\n            \n            <h3>공공데이터 활용 앱 개발 및 아이디어 공모전</h3>\n            <h4>수상명: 아이디어부문 장려상</h4>\n            <p>수상일자: </p>\n            <p>수상기관: </p>\n            <p>내용: </p>\n        </section>\n    );\n}\n\nexport default Award;","import React from 'react';\nimport './App.css';\nimport Title from './portfolio/Title';\nimport Career from './portfolio/Career';\nimport Introduction from './portfolio/Introduction';\nimport Experience from './portfolio/Experience';\nimport Project from './portfolio/Project'\nimport Award from './portfolio/Award'\n\nfunction App() {\n  return (\n    <div>\n      <div>\n        <Title />\n      </div>\n      <div className='portfolio'>\n        <Introduction />\n        <Career />\n        <Experience />\n        <Award />\n        <Project />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}